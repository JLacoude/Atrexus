[user]
createNewUser="INSERT INTO users (`IP`) VALUES(:ip)"
getUser="SELECT ID, login FROM users WHERE ID=:id"
getUserByIP="SELECT ID, login, password FROM users WHERE IP=:ip AND login IS NULL"
getUserByLogin="SELECT ID, login, password FROM users WHERE login=:login"
registerUser="UPDATE users SET login=:login, email=:email, password=:password WHERE ID=:id"
[battlefields]
getBattlefieldListForAnonUser="
SELECT battlefields.ID,
       battlefields.name,
       personnas.ID AS personna_id,
       battlefields.visibility,
       personnas.AP
FROM battlefields
LEFT JOIN personnas
     ON personnas.user_id = :userId
LEFT JOIN positions
     ON positions.battlefield_id = battlefields.ID
     AND personnas.position_id = positions.ID
WHERE battlefields.visibility = 'public'"
getBattlefieldListForUser="
SELECT battlefields.ID,
       battlefields.name,
       personnas.ID AS personna_id,
       battlefields.visibility,
       personnas.AP
FROM battlefields
LEFT JOIN personnas
     ON personnas.user_id = :userId
LEFT JOIN positions
     ON positions.battlefield_id = battlefields.ID
     AND personnas.position_id = positions.ID
WHERE battlefields.visibility IN('public', 'restricted')"
[personnas]
getUserPersonnaInBattlefield="SELECT personnas.ID 
FROM personnas 
INNER JOIN positions
ON personnas.position_id = positions.ID
WHERE personnas.user_id = :userId 
  AND positions.battlefield_id = :battlefieldId"
createPersonna="INSERT INTO personnas (user_id, hive_id, position_id, AP, last_regen) VALUES(:userId, :hiveId, :positionId, :AP, NOW())"
getPersonna="SELECT personnas.ID, 
personnas.user_id, 
personnas.hive_id, 
personnas.position_id, 
personnas.AP, 
TIMESTAMPDIFF(SECOND, personnas.last_regen, NOW()) AS time_from_last_regen,
positions.battlefield_id,
positions.X,
positions.Y,
IF(soldiers.ID IS NULL, 0, 1) AS is_soldier,
soldiers.AP AS soldier_AP,
soldiers.HP,
soldiers.updated AS soldier_updated,
IF(soldiers.ID IS NULL, headquarters.ID, soldiers.ID) AS current_item_id
FROM personnas 
INNER JOIN positions
  ON personnas.position_id = positions.ID
LEFT JOIN soldiers
  ON soldiers.position_id = positions.ID
LEFT JOIN headquarters
  ON headquarters.position_id = positions.ID
WHERE personnas.ID = :id"
getPersonnaHeadquarter="SELECT personnas.ID, 
personnas.hive_id, 
personnas.AP, 
positions.battlefield_id,
positions.X,
positions.Y,
headquarters.ID AS headquarter_id
FROM personnas 
INNER JOIN positions
  ON personnas.position_id = positions.ID
LEFT JOIN headquarters
  ON headquarters.position_id = positions.ID
WHERE personnas.ID = :id"
getPersonnaSoldier="SELECT personnas.ID, 
personnas.hive_id, 
personnas.AP,
positions.ID as position_id,
positions.X,
positions.Y,
positions.battlefield_id,
soldiers.ID AS soldier_id,
soldiers.AP AS soldier_ap
FROM personnas 
INNER JOIN positions
  ON personnas.position_id = positions.ID
LEFT JOIN soldiers
  ON soldiers.position_id = positions.ID
WHERE personnas.ID = :id"
updatePersonna="UPDATE personnas
SET AP = :ap,
    last_regen = NOW() - INTERVAL :toRemove SECOND
WHERE ID = :id"
personnaUseAP="UPDATE personnas SET AP = AP - :ap WHERE ID = :id"
getView="
SELECT 
positions.ID AS position_id,
positions.X,
positions.Y,
soldiers.ID AS soldier_id,
soldiers.hive_id,
soldiers.HP,
soldiers.AP,
soldiers.updated,
headquarters.ID as hq_id,
headquarters.hive_id AS hq_hive,
headquarters.cost_to_capture
FROM positions
LEFT JOIN headquarters
  ON positions.ID = headquarters.position_id
LEFT JOIN soldiers
  ON positions.ID = soldiers.position_id
WHERE positions.battlefield_id = :battlefield
AND positions.X BETWEEN :x - :distance AND :x + :distance
AND positions.Y BETWEEN :y - :distance AND :y + :distance"
bindTo="UPDATE personnas SET position_id = :position WHERE ID = :id"
[headquarters]
getRandomHeadquarter="
SELECT positions.ID
FROM headquarters
INNER JOIN positions
ON headquarters.position_id = positions.ID
WHERE headquarters.hive_id = :hiveId
AND positions.battlefield_id = :battlefieldId
ORDER BY RAND()
LIMIT 1
"
getHeadquarter="
SELECT
headquarters.ID,
headquarters.hive_id,
headquarters.cost_to_capture,
positions.X,
positions.Y,
positions.battlefield_id
FROM headquarters
INNER JOIN positions
ON positions.ID = headquarters.position_id
WHERE headquarters.ID = :id"
updateHeadquarterHive="UPDATE headquarters SET hive_id = :hive WHERE ID = :id"
[hives]
getBattlefieldHiveList="SELECT ID, name FROM hives WHERE battlefield_id = :battlefieldId"
[positions]
getPositionByCoordinates="SELECT ID FROM positions WHERE X = :X AND Y = :Y AND battlefield_id = :battlefield"
createPosition="INSERT INTO positions (X, Y, battlefield_id) VALUES (:X, :Y, :battlefield)"
getHivePosition="SELECT IFNULL(soldiers.hive_id, headquarters.hive_id) AS hive_id,
positions.battlefield_id,
positions.X,
positions.Y
FROM positions
LEFT JOIN headquarters
ON headquarters.position_id = positions.ID
LEFT JOIN soldiers
ON soldiers.position_id = positions.ID
WHERE positions.ID = :id"
movePosition="UPDATE positions SET X = :x, Y = :y WHERE ID = :id"
deletePosition="DELETE FROM positions WHERE ID = :id"
[soldiers]
createSoldier="INSERT INTO soldiers (hive_id, position_id, HP, AP, updated) VALUES (:hive, :position, :HP, :AP, NOW())"
soldierUseAP="UPDATE soldiers SET AP = AP - :ap WHERE ID = :id"
getSoldierInfos="SELECT
soldiers.ID,
soldiers.hive_id,
soldiers.HP,
soldiers.AP, 
TIMESTAMPDIFF(SECOND, soldiers.updated, NOW()) AS time_from_last_regen,
soldiers.position_id,
positions.X,
positions.Y,
positions.battlefield_id
FROM soldiers
INNER JOIN positions
  ON positions.ID = soldiers.position_id
WHERE soldiers.ID = :id"
updateSoldierHP="UPDATE soldiers
SET HP = HP - :damages
WHERE ID = :id"
updateSoldierAP="UPDATE soldiers
SET AP = :ap,
    updated = NOW() - INTERVAL :toRemove SECOND
WHERE ID = :id"
[logs]
attackSoldierLog="INSERT INTO actionlogs(`time`, `type`, user_id, battlefield_id, by_id, by_X, by_Y, target_id, target_X, target_Y, `damages`, `kill`) 
VALUES(NOW(), 'attackSoldier', :user_id, :battlefield_id, :by_id, :by_X, :by_Y, :target_id, :target_X, :target_Y, :damages, :kill)"
captureHeadquarterLog="INSERT INTO actionlogs(`time`, `type`, user_id, battlefield_id, by_id, by_X, by_Y, target_id, target_X, target_Y) 
VALUES(NOW(), 'captureHeadquarter', :user_id, :battlefield_id, :by_id, :by_X, :by_Y, :target_id, :target_X, :target_Y)"
createSoldierLog="INSERT INTO actionlogs(`time`, `type`, user_id, battlefield_id, by_id, by_X, by_Y, target_id, target_X, target_Y) 
VALUES(NOW(), 'createSoldier', :user_id, :battlefield_id, :by_id, :by_X, :by_Y, :target_id, :target_X, :target_Y)"
moveSoldierLog="INSERT INTO actionlogs(`time`, `type`, user_id, battlefield_id, target_id, target_X, target_Y) 
VALUES(NOW(), 'moveSoldier', :user_id, :battlefield_id, :target_id, :target_X, :target_Y)"
getPersonnaLogs="
SELECT `time`,
`type`,
by_id,
target_id,
target_X,
target_Y,
damages,
`kill`,
users.login
FROM actionlogs
INNER JOIN users
ON users.ID = actionlogs.user_id
WHERE (user_id = :userId
  AND battlefield_id = :battlefieldId
   OR by_id = :currentItemId
   OR target_id = :currentItemId)
  AND `type` IN ('createSoldier', 'attackSoldier', 'captureHeadquarter')
ORDER BY `time` DESC
LIMIT 30"